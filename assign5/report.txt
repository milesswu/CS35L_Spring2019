Miles Wu
----Lab Section----
The point of the lab.txt file is for you to be able to subjectively
describe important and complex points of implementation in your code,
be able to mention places where you faced difficulty and how you were
able to get past it and finally jot down results that you get. The
content you write should be detailed to the point that a third person
reading your lab report is able to replicate your actions and
reproduce your results.  

1. Write tr2b.c using getchar and putchar
The first functionality to address was the accepting of two operands and
verifying their validity. To distinguish operands from stdin, I used main with
the parameters argc and argv[]. We check that exactly two operands are passed
in, we check the size of each of the operands an verify they are of equal
length, and then we check that the first operand does not contain any duplicate
characters.
The second task is to handle input from stdin. I decided to malloc enough space
for one character and realloc for every next byte read from getchar.
Additionally, while testing the standard tr utility, I noted that for every
newline character, the command would immediately print out the translated output
instead of waiting for an EOF or some other termination. To replicate the tr
command more closely, I added an extra check for '\n' characters, at which point
I would process and output the result of the input to stdout.
Transliterating input itself was a relatively simple task that just involved
iterating through the input string.

2. Write tr2u.c using system calls only
Essentially modifying tr2b.c to accommodate the use of read and write system
calls. Had a few problems with how read returns the bytes read (more
specifically, the type of variable it used being void* causing
confusion). Eventually, using a character array of size 1 resulted in the
desired behavior (distinct from a character pointer, which I tried at first,
which caused an error when reading from input).

3. Use strace to compare system calls used by both programs
Created a file of at least 5,000,000 bytes. Used the strace command with tr2b
and tr2u on the created file and compared results.
We notice that in both situations, tr2b uses a significantly less number of
system calls than tr2u does.

Shell Command:
shuf -r -n 5000000 > bigfile.txt
>helo
>ther
>hello there

a. When copying one file to another
Shell Commands:
strace -o call2b -c ./tr2b helo ther < bigfile.txt > big2b
strace -o call2u ./tr2u helo ther < bigfile.txt > big2u

Output:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 56.60    0.003930           1      3968           write
 27.46    0.001907           0      3970           read
 14.99    0.001041           0      2370           brk
  0.30    0.000021           2         9           mmap
  0.27    0.000019           5         4           mprotect
  0.16    0.000011           3         4           fstat
  0.16    0.000011          11         1           munmap
  0.06    0.000004           4         1           arch_prctl
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00    0.006944                 10333         1 total

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 83.66  104.721721           3  32498441           read
 16.34   20.449064           4   5000001           write
  0.01    0.008947           4      2370           brk
  0.00    0.000040           6         7           mmap
  0.00    0.000030           8         4           mprotect
  0.00    0.000015           8         2           open
  0.00    0.000010          10         1           munmap
  0.00    0.000007           7         1         1 access
  0.00    0.000007           7         1           execve
  0.00    0.000006           3         2           close
  0.00    0.000006           3         2           fstat
  0.00    0.000003           3         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00  125.179856              37500833         1 total

b. When copying a file to terminal
Shell Commands:
strace -o call2b -c ./tr2b helo ther < bigfile.txt
strace -o call2u -c ./tr2u helo ther < bigfile.txt

Output:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 99.87   23.246761           5   5000000           write
  0.09    0.021565           5      3970           read
  0.04    0.008693           4      2370           brk
  0.00    0.000059           7         9           mmap
  0.00    0.000030           8         4           mprotect
  0.00    0.000023          12         2           open
  0.00    0.000020          20         1           execve
  0.00    0.000018           5         4           fstat
  0.00    0.000010          10         1           munmap
  0.00    0.000008           8         1         1 access
  0.00    0.000006           3         2           close
  0.00    0.000003           3         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00   23.277196               5006365         1 total

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 80.72  103.916517           3  32498441           read
 19.27   24.805072           5   5000001           write
  0.01    0.008964           4      2370           brk
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         7           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00  128.730553              37500833         1 total

4. Compare the speed of both programs
Used the time command with tr2b and tr2u with the same 5,000,000 byte file and
under the same conditions.
We see that for all time stats (real, user, sys), tr2b executes in significantly
less time than tr2u does.

a. Copying one file to another
Shell Commands:
/usr/bin/time -p -o time2b ./tr2b helo ther < bigfile.txt > big2b
/usr/bin/time -p -o time2u ./tr2u helo ther < bigfile.txt > big2u

Output:
real 2.33
user 1.86
sys 0.17

real 31.76
user 6.15
sys 25.03

b. Copying file to terminal
Shell Commands:
/usr/bin/time -p -o time2b ./tr2b helo ther < bigfile.txt
/usr/bin/time -p -o time2u ./tr2u helo ther < bigfile.txt

Output:
real 62.48
user 3.39
sys 6.80

real 67.26
user 6.22
sys 27.55

----Homework Section----
1. sfrobu vs sfrob
Shell Commands:
touch zero
shuf -n 100 -r -e "~BO {_CIA FKPS NEM" > hundred
shuf -n 1000 -r -e "~BO {_CIA FKPS NEM" > thousand
shuf -n 10000 -r -e "~BO {_CIA FKPS NEM" > tenthou
shuf -n 100000 -r -e "~BO {_CIA FKPS NEM" > hunthou
shuf -n 1000000 -r -e "~BO {_CIA FKPS NEM" > million
/usr/bin/time -p -o tsfrob ./sfrob < hundred
/usr/bin/time -p -o tsfrobu ./sfrobu < hundred
/usr/bin/time -p -o tsfrob ./sfrob < thousand
/usr/bin/time -p -o tsfrobu ./sfrobu < thousand
/usr/bin/time -p -o tsfrob ./sfrob < tenthou
/usr/bin/time -p -o tsfrobu ./sfrobu < tenthou
/usr/bin/time -p -o tsfrob ./sfrob < hunthou
/usr/bin/time -p -o tsfrobu ./sfrobu < hunthou
/usr/bin/time -p -o tsfrob ./sfrob < million
/usr/bin/time -p -o tsfrobu ./sfrobu < million

File size (lines)
0:
sfrob
0 calls to compare
real 0.00
user 0.00
sys 0.00

sfrobu
0 calls to compare
real 0.00
user 0.00
sys 0.00

100:
sfrob
1913 calls to compare
real 0.00
user 0.00
sys 0.00

sfrobu
1904 calls to compare
real 0.00
user 0.00
sys 0.00

1000:
sfrob
27553 calls to compare
real 0.08
user 0.00
sys 0.00

sfrobu
27548 calls to compare
real 0.00
user 0.00
sys 0.00

10000:
sfrob
356706 calls to compare
real 7.84
user 0.02
sys 0.02

sfrobu
356688 calls to compare
real 4.30
user 0.02
sys 0.04

100000:
sfrob
4399494 calls to compare
real 64.55
user 0.38
sys 0.16

sfrobu
4399472 calls to compare
real 43.78
user 0.28
sys 0.41

1000000:
sfrob
52428309 calls to compare

sfrobu

Both programs seem to increase their number of comparisons exponentially as the
number of lines in the file increases.

2. Time of all programs
The -f variants of all programs tend to overall run faster than the programs
not using the -f option.
sfrobs tends to take more time (sys and user wise) when parsing larger files but
does slightly better on the smaller files than sfrob and sfrobu.

Shell Commands:
/usr/bin/time -p -o tsfrobs ./sfrobu -f < zero
/usr/bin/time -p -o tsfrobs ./sfrobs < zero
/usr/bin/time -p -o tsfrobs ./sfrobs -f < zero

/usr/bin/time -p -o tsfrobs ./sfrobs < hundred
/usr/bin/time -p -o tsfrobs ./sfrobs < thousand
/usr/bin/time -p -o tsfrobs ./sfrobs < tenthou
/usr/bin/time -p -o tsfrobs ./sfrobs < hunthou

/usr/bin/time -p -o tsfrobs ./sfrobs -f< hundred
/usr/bin/time -p -o tsfrobs ./sfrobs -f< thousand
/usr/bin/time -p -o tsfrobs ./sfrobs -f < tenthou
/usr/bin/time -p -o tsfrobs ./sfrobs -f < hunthou

/usr/bin/time -p -o tsfrobu ./sfrobu -f < hundred
/usr/bin/time -p -o tsfrobu ./sfrobu -f < thousand
/usr/bin/time -p -o tsfrobu ./sfrobu -f < tenthou
/usr/bin/time -p -o tsfrobu ./sfrobu -f < hunthou


File size
0:
sfrobu -f
real 0.00
user 0.00
sys 0.00

sfrobs
real 0.04
user 0.01
sys 0.00

sfrobs -f
real 0.02
user 0.01
sys 0.00

100:
sfrobu -f
real 0.00
user 0.00
sys 0.00

sfrobs
real 0.01
user 0.01
sys 0.00

sfrobs -f
real 0.01
user 0.01
sys 0.00

1000:
sfrobu -f
real 0.00
user 0.00
sys 0.00

sfrobs
real 0.02
user 0.02
sys 0.00

sfrobs -f
real 0.02
user 0.01
sys 0.00

10000:
sfrobu -f
real 2.79
user 0.03
sys 0.03

sfrobs
real 3.24
user 0.04
sys 0.05

sfrobs -f
real 1.02
user 0.05
sys 0.05

100000:
sfrobu -f
real 75.07
user 0.35
sys 0.36

sfrobs
real 56.64
user 0.38
sys 0.37

sfrobs -f
real 44.47
user 0.46
sys 0.46
