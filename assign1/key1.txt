Name: Miles Wu
1.1
2. C-s H T M L Enter
3. C-s s c M-b
4. C-s s e l f M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
10. C-x C-c

1.2
2. M-g g 1 8 C-k C-k
3. C-s D E C-a C-k C-k
4. C-s < ! C-a C-SP M-} Backspace
5. C-s < ! C-SP M-f C-b C-b C-b C-b Backspace C-n C-a C-SP M-} M-} Backspace C-> C-p C-k C-k
C-x C-s
C-x C-c

1.3
2. C-s 1 . C-b Backspace 4 2 C-s 1 . C-b Backspace 4 2
3. C-r U M-d M-d U S - A S C I I '
4. C-M-s [ ^ [ : a s c i i : ] ] C-a C-k C-k
5. C-s / o l C-n Enter
6. C-x C-s C-x C-c

1.4
3. M-> C-p C-f C-SP C-e C-w C-y M-g g 4 0 8 Enter C-y Enter
4. M-> M-{ M-{ M-{ M-f M-f M-f M-f C-SP M-f C-b C-b C-b C-b C-w C-y C-a C-n C-f C-SP M-} C-p C-w C-y M-g g 3 9 4 C-y M-{ C-n M-f M-f M-f M-f C-y M-y M-> M-v M-} C-n C-f C-SP M-} C-w C-y M-{ M-{ M-{ M-{ C-f C-SP C-e C-w C-y M-v C-SP C-p C-p C-f C-w C-y M-g g 1 7 Enter C-y Backspace M-g g 1 2 6 Enter C-y M-y M-g g 3 5 1 Enter C-n C-y M-y
5. M-> C-SP C-s - - - SP Enter Backspace
6. C-/
7. Enter C-p < ! - - M-> - - >
8. C-s < o l > C-s  M-% < o L > Enter !
(Found 7 occurrences of "<ol>")

1.5
1. C-x d Enter + j u n k Enter Enter
2. C-x C-f h e l l o . c Enter
3. M-x c o m p i l e Enter h e l l o . c SP h e l l o Enter
4. M-! . / h e l l o Enter C-x b * S Tab C-x C-s h e l l o - o u t Enter
5. M-< C-SP M-> C-w C-y C-x C-f k e y 1 . t x t Enter M-> C-y
Exact output:
EOF on input

1.6
1. C-x b * s Tab Enter
2. ( r a n d o m " 7 0 5 - 1 9 2 - 8 9 2 " ) C-j
Result:-762763813351053705
3. ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP x SP ( r a n d o m ) ) C-j
4. ( * x SP y ) C-j
The result of the product is incorrect
5. M-: ( * x SP y )
The output shows up in the minibuffer and is accompanied by two numbers with the # prefix
6.
The two numbers are not truly random, given the same seed the random number generator would create the same sequence of "random" numbers
7.
The probability of these two random number producing an incorrect result is ~99.9999989994%
I calculated this probabilty by dividing the number of x, y pairs that would produce an integer representable by 32 bits by the total number of possible products (calculated by taking the bounds of signed integer values as maximum/minimum x and y values).
I approximated the number of products that would produce an integer by taking the integral of the function y = (2^31 - 1)/x from 1 to 2^31 - 1, which gives the number of x, y pairs that produce an integer between 1 and 2^31 - 1, and multiplying it by 4  
